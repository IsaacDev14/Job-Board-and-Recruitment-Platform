// frontend/src/api/api.ts
import axios from 'axios';

// Ensure this matches your Flask backend URL and API prefix
const API_BASE_URL = 'http://127.0.0.1:5000/api';

// --- Type Definitions ---
// These interfaces reflect the data structures expected by and returned from your Flask backend.
// Adjust these to precisely match your Flask-RESTx models' fields and types.

interface User {
  id?: number; // ID is usually generated by the backend
  username: string;
  email: string;
  password?: string; // Password is only sent during registration/login, not usually returned
  first_name?: string;
  last_name?: string;
  is_recruiter?: boolean;
  company_id?: number; // Only for recruiters
  created_at?: string; // ISO 8601 date string
  updated_at?: string; // ISO 8601 date string
}

interface LoginCredentials {
  email: string;
  password: string;
}

interface Company {
  id?: number;
  name: string;
  location?: string;
  industry?: string;
  description?: string;
  website?: string;
  created_at?: string;
  updated_at?: string;
}

interface Job {
  id?: number;
  title: string;
  description: string;
  location: string;
  job_type: 'Full-time' | 'Part-time' | 'Contract' | 'Temporary' | 'Internship';
  salary_min?: number;
  salary_max?: number;
  company_id: number;
  recruiter_id: number;
  posted_at?: string;
  updated_at?: string;
}

interface Application {
  id?: number;
  job_id: number;
  user_id: number;
  status: 'Pending' | 'Reviewed' | 'Accepted' | 'Rejected';
  applied_at?: string;
  updated_at?: string;
}

// --- Axios Instance Setup ---
const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request Interceptor: Attach JWT token to requests
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('authToken'); // Use a consistent key like 'authToken'
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response Interceptor: Handle Flask-RESTx responses
api.interceptors.response.use(
  (response) => {
    // Flask-RESTx directly returns the data on success (2xx status codes).
    // So, we just return the response as is for successful operations.
    return response;
  },
  (error) => {
    // Handle errors from the backend. Flask-RESTx usually returns a 'message' field for errors.
    if (error.response && error.response.data && error.response.data.message) {
      // Rejects with the backend's specific error message
      return Promise.reject(error.response.data.message);
    } else if (error.response) {
      // If no specific message, reject with generic status text
      return Promise.reject(`Server error: ${error.response.status} ${error.response.statusText}`);
    } else if (error.request) {
      // Request was made but no response received (e.g., network error, backend not running)
      return Promise.reject('No response from server. Please check your network connection and ensure the backend is running.');
    } else {
      // Something happened in setting up the request that triggered an Error
      return Promise.reject(`Error setting up request: ${error.message}`);
    }
  }
);

// --- API Functions for your Backend Endpoints ---

// --- Auth Endpoints ---
export const registerUser = async (userData: User): Promise<{ message: string, access_token: string }> => {
  const response = await api.post('/auth/register', userData);
  return response.data;
};

export const loginUser = async (credentials: LoginCredentials): Promise<{ message: string, access_token: string, user: User }> => {
  const response = await api.post('/auth/login', credentials);
  return response.data;
};

// --- User Endpoints ---
export const getUsers = async (isRecruiter?: boolean): Promise<User[]> => {
  const params = isRecruiter !== undefined ? { is_recruiter: isRecruiter } : {};
  const response = await api.get('/users', { params });
  return response.data;
};

export const getUserById = async (userId: number): Promise<User> => {
  const response = await api.get(`/users/${userId}`);
  return response.data;
};

export const updateUser = async (userId: number, userData: Partial<User>): Promise<User> => {
  const response = await api.put(`/users/${userId}`, userData);
  return response.data;
};

export const deleteUser = async (userId: number): Promise<{ message: string }> => {
  const response = await api.delete(`/users/${userId}`);
  return response.data;
};

// --- Company Endpoints ---
export const getCompanies = async (): Promise<Company[]> => {
  const response = await api.get('/companies');
  return response.data;
};

export const getCompanyById = async (companyId: number): Promise<Company> => {
  const response = await api.get(`/companies/${companyId}`);
  return response.data;
};

export const createCompany = async (companyData: Company): Promise<Company> => {
  const response = await api.post('/companies', companyData);
  return response.data;
};

export const updateCompany = async (companyId: number, companyData: Partial<Company>): Promise<Company> => {
  const response = await api.put(`/companies/${companyId}`, companyData);
  return response.data;
};

export const deleteCompany = async (companyId: number): Promise<{ message: string }> => {
  const response = await api.delete(`/companies/${companyId}`);
  return response.data;
};

// --- Job Endpoints ---
export const getJobs = async (filters?: { location?: string; job_type?: string; company_id?: number; recruiter_id?: number; }): Promise<Job[]> => {
  const response = await api.get('/jobs', { params: filters });
  return response.data;
};

export const getJobById = async (jobId: number): Promise<Job> => {
  const response = await api.get(`/jobs/${jobId}`);
  return response.data;
};

export const createJob = async (jobData: Job): Promise<Job> => {
  const response = await api.post('/jobs', jobData);
  return response.data;
};

export const updateJob = async (jobId: number, jobData: Partial<Job>): Promise<Job> => {
  const response = await api.put(`/jobs/${jobId}`, jobData);
  return response.data;
};

export const deleteJob = async (jobId: number): Promise<{ message: string }> => {
  const response = await api.delete(`/jobs/${jobId}`);
  return response.data;
};

// --- Application Endpoints (Placeholder, implement as needed) ---
export const applyForJob = async (applicationData: Application): Promise<Application> => {
  const response = await api.post('/applications', applicationData);
  return response.data;
};

export const getUserApplications = async (userId: number): Promise<Application[]> => {
  const response = await api.get(`/applications?user_id=${userId}`);
  return response.data;
};

// Export the axios instance as default (if other parts of your app directly use it)
export default api;
