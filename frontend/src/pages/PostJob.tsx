// src/pages/PostJob.tsx
import React, { useState, useEffect } from 'react';
import { useAuth } from '../hooks/useAuth';
import api from '../api/api';
// We only need Job and Company types here, not necessarily for the newJob payload itself
import type { Company, Job } from '../types/job';
import { FaSpinner } from 'react-icons/fa'; // Added FaSpinner for loading state

interface PostJobProps {
  onNavigate: (page: string, param?: number | string) => void;
}

const PostJob: React.FC<PostJobProps> = ({ onNavigate }) => {
  const { user } = useAuth();
  const [jobTitle, setJobTitle] = useState('');
  const [location, setLocation] = useState('');
  const [salaryRange, setSalaryRange] = useState('');
  const [jobType, setJobType] = useState('Full-time');
  const [image, setImage] = useState('');
  const [description, setDescription] = useState('');
  const [companyId, setCompanyId] = useState<number | null>(null);
  const [companyName, setCompanyName] = useState<string | null>(null); // This is for display
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);

  // Fetch recruiter's company ID on component mount
  useEffect(() => {
    const fetchCompanyId = async () => {
      if (user && user.role === 'recruiter') {
        try {
          // Assuming company name is related to username for simplicity
          // Or, you might have a dedicated endpoint for recruiter's company
          const companyRes = await api.get<Company[]>(`/companies?name=${user.username} Co.`);
          if (companyRes.data.length > 0) {
            setCompanyId(companyRes.data[0].id);
            setCompanyName(companyRes.data[0].name); // Store name for display purposes
          } else {
            // If no company found, perhaps create one or show an error
            setError("Your company profile was not found. Please contact support or ensure your company is registered.");
          }
        } catch (err) {
          console.error("Failed to fetch company ID:", err);
          setError("Failed to load company information.");
        }
      }
    };
    fetchCompanyId();
  }, [user]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setSuccess(null);
    setLoading(true);

    if (!user || user.role !== 'recruiter' || companyId === null) { // companyName isn't strictly needed for post data
      setError("You must be a recruiter with a valid company to post a job.");
      setLoading(false);
      return;
    }

    try {
      // Find the highest existing job ID and increment it for a new ID
      // NOTE: In a real backend, the ID would be generated by the database.
      // For JSON-Server, this manual ID generation is common.
      const jobsResponse = await api.get<Job[]>('/jobs?_sort=id&_order=desc&_limit=1');
      const lastJobId = jobsResponse.data.length > 0 ? jobsResponse.data[0].id : 0;
      const newJobId = lastJobId + 1;

      // Define the payload for the API call.
      // This payload should match what your backend *expects* for job creation.
      // It typically won't include the full 'company' object, just 'company_id'.
      // We explicitly omit 'company' property from the Job type for this payload.
      const newJobPayload = {
        id: newJobId,
        title: jobTitle,
        company_id: companyId, // THIS IS THE KEY: only send the ID
        location,
        salary_range: salaryRange,
        type: jobType,
        image: image || 'https://via.placeholder.com/400x200?text=Job+Image', // Provide a default if empty
        description,
      };

      // Now, cast newJobPayload to `Job` for type safety IF it truly represents a Job
      // However, usually when POSTing, you send a subset of the Job interface.
      // A more accurate type for payload might be `Omit<Job, 'company'> & { company_id: number }`
      // For simplicity and matching current structure, we'll just omit 'company' from the object directly.
      await api.post('/jobs', newJobPayload); // Post the payload without the 'company' object

      setSuccess('Job posted successfully! Redirecting to Dashboard...');
      // Clear form
      setJobTitle('');
      setLocation('');
      setSalaryRange('');
      setJobType('Full-time');
      setImage('');
      setDescription('');

      // Redirect to dashboard after a short delay
      setTimeout(() => {
        onNavigate('dashboard');
      }, 2000);

    } catch (err) {
      console.error("Error posting job:", err);
      setError('Failed to post job. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  if (!user || user.role !== 'recruiter') {
    return <div className="min-h-screen py-20 text-center text-red-600">Access Denied: Only recruiters can post jobs.</div>;
  }

  return (
    <section className="min-h-screen py-16 px-4 bg-gray-50 flex items-center justify-center">
      <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-2xl">
        <h2 className="text-3xl font-bold text-center mb-6">Post a New Job</h2>
        {error && <p className="text-red-500 text-sm mb-4 text-center">{error}</p>}
        {success && <p className="text-green-500 text-sm mb-4 text-center">{success}</p>}

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label htmlFor="jobTitle" className="block text-sm font-medium text-gray-700">
              Job Title
            </label>
            <input
              type="text"
              id="jobTitle"
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              value={jobTitle}
              onChange={(e) => setJobTitle(e.target.value)}
              required
            />
          </div>
          <div>
            <label htmlFor="companyName" className="block text-sm font-medium text-gray-700">
              Company Name (Auto-filled)
            </label>
            <input
              type="text"
              id="companyName"
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm bg-gray-100 cursor-not-allowed"
              value={companyName || (user ? `${user.username} Co.` : '')} // Display companyName
              readOnly
              disabled
            />
          </div>
          <div>
            <label htmlFor="location" className="block text-sm font-medium text-gray-700">
              Location
            </label>
            <input
              type="text"
              id="location"
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              value={location}
              onChange={(e) => setLocation(e.target.value)}
              required
            />
          </div>
          <div>
            <label htmlFor="salaryRange" className="block text-sm font-medium text-gray-700">
              Salary Range (e.g., $3,000 - $4,000/month)
            </label>
            <input
              type="text"
              id="salaryRange"
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              value={salaryRange}
              onChange={(e) => setSalaryRange(e.target.value)}
              required
            />
          </div>
          <div>
            <label htmlFor="jobType" className="block text-sm font-medium text-gray-700">
              Job Type
            </label>
            <select
              id="jobType"
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              value={jobType}
              onChange={(e) => setJobType(e.target.value)}
              required
            >
              <option value="Full-time">Full-time</option>
              <option value="Part-time">Part-time</option>
              <option value="Contract">Contract</option>
              <option value="Freelance">Freelance</option>
              <option value="Internship">Internship</option>
            </select>
          </div>
          <div>
            <label htmlFor="image" className="block text-sm font-medium text-gray-700">
              Image URL (Optional)
            </label>
            <input
              type="url"
              id="image"
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              value={image}
              onChange={(e) => setImage(e.target.value)}
              placeholder="e.g., https://example.com/job-image.jpg"
            />
          </div>
          <div>
            <label htmlFor="description" className="block text-sm font-medium text-gray-700">
              Job Description
            </label>
            <textarea
              id="description"
              rows={6}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              required
            ></textarea>
          </div>
          <button
            type="submit"
            className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50"
            disabled={loading || companyId === null}
          >
            {loading ? <FaSpinner className="animate-spin inline-block mr-2" /> : ''}
            {loading ? 'Posting...' : 'Post Job'}
          </button>
        </form>
      </div>
    </section>
  );
};

export default PostJob;